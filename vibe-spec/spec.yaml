# GLTF-VRM-Merger 프로젝트 사양서
# 작성일: 2025-05-19
# 버전: 2.0.0 (Three.js 네이티브 API 적용)

project:
  name: "GLTF-VRM-Merger"
  description: "VRM과 GLTF 모델을 로드하고 노드를 병합/복사/삭제할 수 있는 웹 기반 3D 모델 에디터"
  version: "2.0.0"
  technology_stack:
    - "Next.js 15.2.4"
    - "React 19"  
    - "Three.js (네이티브 API 활용)"
    - "@pixiv/three-vrm"
    - "Tailwind CSS"
    - "shadcn/ui"
    - "TypeScript"

# 핵심 기능 (기존)
core_features:
  model_loading:
    - title: "VRM/GLTF 모델 로딩"
      status: "implemented"
      description: "드래그앤드롭으로 VRM, GLB 파일 업로드 및 로딩"
      components:
        - "components/model-drop-zone.tsx"
        - "components/model-viewer.tsx"
    
  model_viewer:
    - title: "3D 모델 뷰어"  
      status: "enhanced"
      description: "Three.js 기반 3D 뷰어, 개선된 애니메이션 재생 컨트롤"
      components:
        - "components/model-viewer.tsx"
      features:
        - "OrbitControls 카메라 조작"
        - "애니메이션 재생/일시정지/리셋"
        - "애니메이션 진행 상태 슬라이더 (개선됨)"
        - "모델 자동 스케일링 및 센터링"
        - "무한 루프 애니메이션 지원"
        - "정확한 애니메이션 시간 제어"
        
  model_structure:
    - title: "모델 구조 트리 뷰"
      status: "enhanced" 
      description: "Three.js Object3D 기반 정확한 계층구조 표시"
      components:
        - "components/model-tree.tsx (기존)"
        - "components/enhanced-model-tree.tsx (신규 개선)"
      features:
        - "실제 Three.js 씬 구조 반영"
        - "노드 타입별 아이콘 및 배지"
        - "자식 노드 관계 정확한 표시"
        - "검색 및 필터링"
        - "가시성 토글"
        
  node_operations:
    - title: "노드 조작 기능"
      status: "enhanced"
      description: "Three.js 네이티브 API 기반 노드 조작"
      components:
        - "components/model-tree.tsx (기존)"
        - "components/enhanced-model-tree.tsx (개선)"
        - "lib/model-utils.ts (기존)"
        - "lib/three-scene-utils.ts (신규)"
      features:
        - "Object3D.add()/remove() 활용 계층구조 조작"
        - "재귀적 완전 복제 (cloneObject3DRecursive)"
        - "메시/머티리얼/텍스처 참조 관계 보존"
        - "VRM 본 구조 유지"
        - "실행 취소/다시 실행 (히스토리 관리)"
        
  history_management:
    - title: "히스토리 관리"
      status: "implemented"
      description: "작업 내역 관리 및 실행 취소/다시 실행"
      components:
        - "lib/history-manager.ts"
        - "app/page.tsx"
      features:
        - "50단계 히스토리 저장"
        - "실행 취소/다시 실행 버튼"
        - "작업별 설명 메시지"
        
  model_export:
    - title: "모델 내보내기"
      status: "implemented"
      description: "편집된 모델을 GLB 파일로 내보내기"
      components:
        - "components/model-download-button.tsx"

# 새로 구현된 고급 기능들
enhanced_features:
  node_hierarchy_improvement:
    - title: "노드 계층구조 개선"
      status: "completed"
      priority: "high"
      description: "VRM/GLTF의 노드 계층구조를 정확하게 표시하고 조작"
      implemented_solutions:
        - "lib/three-scene-utils.ts: Three.js 네이티브 API 활용 유틸리티"
        - "components/enhanced-model-tree.tsx: Object3D 기반 트리 컴포넌트"
        - "cloneObject3DRecursive: 전체 서브트리 복제 함수"
        - "moveObjectToParent, copyObjectToParent: 계층구조 조작 함수"
      features_implemented:
        - "Three.js Object3D.add(), Object3D.remove() 활용"
        - "모든 하위 노드 포함한 전체 서브트리 복사"
        - "메시, 머티리얼, 텍스처 참조 관계 올바른 복사"
        - "실시간 씬 그래프 동기화"
        
  node_copy_paste_enhancement:
    - title: "노드 복사/붙여넣기 개선"
      status: "completed"  
      priority: "high"
      description: "Three.js의 append/remove API를 활용한 계층구조 유지 복사"
      implemented_solutions:
        - "cloneObject3DRecursive: 재귀적 완전 복제"
        - "스키닝된 메시의 본 참조 업데이트"
        - "지오메트리와 머티리얼 개별 복제"
        - "VRM 휴마노이드 본 구조 보존"
      technical_details:
        - "Three.js clone(true) 메서드 활용"
        - "본 스켈레톤 참조 재구성"
        - "순환 참조 방지 로직"
        - "월드 좌표계 보존 옵션"

  real_time_sync:
    - title: "실시간 씬 동기화"
      status: "completed"
      priority: "medium"
      description: "모델 구조 변경 시 3D 뷰어 실시간 업데이트"
      implemented_features:
        - "SceneStructureSync 클래스"
        - "구조 변경 즉시 Three.js 씬 반영"
        - "노드 선택 상태 관리"
        - "동기화 콜백 시스템"

  advanced_operations:
    - title: "고급 노드 조작"
      status: "completed"
      priority: "low"
      description: "더 복잡한 노드 조작 기능"
      implemented_features:
        - "NodeSearcher 클래스: 다양한 검색 조건"
        - "BatchOperationProcessor: 배치 작업 처리"
        - "노드 가시성 토글"
        - "타입별 필터링"
        - "검색 및 하이라이트"
        - "노드 선택 및 다중 선택 지원"

# 새로 추가된 전문 기능들
specialized_features:
  enhanced_model_tree:
    - title: "개선된 모델 트리"
      status: "implemented"
      description: "Three.js Object3D 기반의 완전한 계층구조 표시"
      components:
        - "components/enhanced-model-tree.tsx"
      features:
        - "실제 Three.js 씬 구조 반영"
        - "노드 검색 및 필터링"
        - "가시성 토글"
        - "노드 타입별 아이콘 및 배지"
        - "실시간 씬 동기화"
        - "직관적인 UI/UX"

  scene_graph_tree:
    - title: "Scene Graph 트리"
      status: "implemented"
      description: "Three.js Scene 객체의 계층구조를 직접 조작"
      components:
        - "components/scene-graph-tree.tsx"
      features:
        - "Scene 루트부터 모든 Object3D 표시"
        - "시스템 객체 (조명, Helper) 별도 구분"
        - "Cross-Scene Graph 노드 복사"
        - "같은 Scene 내 노드 이동"
        - "실시간 가시성 제어"
        - "Scene Graph 통계 표시"
        - "Object3D 타입별 세분화 아이콘"

  dual_clipboard_system:
    - title: "이중 클립보드 시스템"
      status: "implemented"
      description: "JSON 기반과 Object3D 기반 클립보드 동시 지원"
      features:
        - "모델 구조 클립보드 (JSON)"
        - "Scene Graph 클립보드 (Object3D)"
        - "클립보드 상태 시각적 피드백"
        - "Cross-domain 복사/붙여넣기"
        - "클립보드 통합 관리"
  
  three_scene_utils:
    - title: "Three.js 씬 유틸리티"
      status: "implemented"
      description: "Three.js Object3D 조작을 위한 포괄적 유틸리티 모음"
      components:
        - "lib/three-scene-utils.ts"
      utilities:
        - "cloneObject3DRecursive: 재귀적 완전 복제"
        - "findObjectInScene: UUID/이름 기반 객체 검색"
        - "getObjectPath: 계층 경로 반환"
        - "moveObjectToParent: 안전한 부모 변경"
        - "copyObjectToParent: 계층구조 유지 복사"
        - "removeObjectFromScene: 리소스 정리 포함 삭제"
        - "sceneToHierarchy: 씬을 JSON으로 변환"
        - "updateNodeSelection: 선택 상태 관리"
      
  node_searcher:
    - title: "노드 검색 시스템"
      status: "implemented"
      description: "다양한 조건으로 Three.js 객체 검색"
      features:
        - "이름 기반 검색 (정확/부분 일치)"
        - "타입 기반 검색"
        - "사용자 데이터 검색"
        - "커스텀 조건 함수 검색"
  
  batch_processor:
    - title: "배치 작업 처리기"
      status: "implemented"
      description: "다수의 노드 조작을 배치로 처리"
      features:
        - "배치 이동/복사/삭제/이름변경"
        - "트랜잭션 단위 실행"
        - "전체 성공/실패 정보"
        - "개별 작업 결과 추적"

  vrm_bone_handler:
    - title: "VRM 본 구조 처리"
      status: "implemented"
      description: "VRM 휴마노이드 본 관계 추적 및 처리"
      features:
        - "표준 VRM 본 매핑"
        - "본 계층구조 시각화"
        - "휴마노이드 설정 보존"

  material_relation_tracker:
    - title: "메시-머티리얼 관계 추적"
      status: "implemented"
      description: "3D 객체 간의 참조 관계 분석"
      features:
        - "메시-머티리얼 매핑"
        - "머티리얼-텍스처 관계"
        - "참조 무결성 검증"

# 파일 구조 (업데이트)
file_structure:
  app/:
    - "layout.tsx: Next.js 최상위 레이아웃"
    - "page.tsx: 메인 페이지 컴포넌트, 상태 관리 및 UI 조합"
    - "globals.css: 전역 스타일"
    
  components/:
    - "model-drop-zone.tsx: 파일 드롭 구역"
    - "model-viewer.tsx: Three.js 3D 뷰어"
    - "model-tree.tsx: 기본 구조 트리 컴포넌트"
    - "enhanced-model-tree.tsx: Three.js 기반 개선된 트리 컴포넌트"
    - "scene-graph-tree.tsx: Scene Graph 전용 트리 컴포넌트"
    - "model-download-button.tsx: GLB 내보내기"
    - "theme-provider.tsx: 테마 관리"
    - "ui/: shadcn/ui 컴포넌트 모음"
    
  lib/:
    - "model-utils.ts: 기본 모델 조작 유틸리티"
    - "three-scene-utils.ts: Three.js 네이티브 API 기반 유틸리티"
    - "history-manager.ts: 실행 취소/다시 실행 관리"
    
  hooks/:
    - "커스텀 React 훅 (필요시 추가)"
    
  vibe-spec/:
    - "spec.yaml: 프로젝트 사양서"

# Three.js API 활용 현황
threejs_apis_implemented:
  object3d_manipulation:
    add: "✅ object3d.add(child) - 자식 객체 추가"
    remove: "✅ object3d.remove(child) - 자식 객체 제거"  
    clone: "✅ object3d.clone(recursive) - 객체 복제"
    copy: "✅ object3d.copy(source, recursive) - 객체 속성 복사"
    traverse: "✅ object3d.traverse(callback) - 모든 하위 객체 순회"
    
  scene_operations:
    add_to_scene: "✅ scene.add(object) - 씬에 객체 추가"
    remove_from_scene: "✅ scene.remove(object) - 씬에서 객체 제거"
    getObjectByName: "✅ scene.getObjectByName(name) - 이름으로 객체 검색"
    
  hierarchy_preservation:
    description: "✅ Three.js Object3D 기반 계층구조 완전 지원"
    clone_behavior: "✅ clone(true)로 전체 서브트리 복제 구현"
    parent_relationship: "✅ child.parent, children 배열 활용"

# 완성 상태 (최종)
project_status:
  completion_percentage: 100
  working_features:
    - "✅ 기본 모델 로딩 및 표시"
    - "✅ 애니메이션 재생 컨트롤"
    - "✅ 모델 구조 트리 (JSON 기반)"
    - "✅ Scene Graph 트리 (Object3D 기반)"
    - "✅ 이중 클립보드 시스템"
    - "✅ Object3D 네이티브 API 활용 노드 조작"
    - "✅ 계층구조 유지 복사/붙여넣기/삭제"
    - "✅ Cross-Scene Graph 노드 전송"
    - "✅ 실시간 씬 동기화"
    - "✅ 노드 검색 및 필터링"
    - "✅ 가시성 제어"
    - "✅ 배치 작업 처리"
    - "✅ VRM 본 구조 지원"
    - "✅ 시스템 객체 구분"
    - "✅ 히스토리 관리 (실행 취소/다시 실행)"
    - "✅ GLB 내보내기"
  
  remaining_tasks:
    - "✅ scene-graph-tree.tsx 구문 오류 수정 완료"

# 사용 방법
usage_instructions:
  basic_workflow:
    1: "VRM/GLB 파일을 좌우 드롭존에 업로드"
    2: "개선된 모델 트리에서 계층구조 확인"
    3: "노드 복사 버튼으로 원하는 노드 복사"
    4: "상대편 모델의 대상 노드에 붙여넣기"
    5: "실시간으로 3D 뷰어에서 결과 확인"
    6: "필요시 실행 취소/다시 실행"
    7: "편집 완료 후 GLB 형태로 내보내기"
  
  advanced_features:
    - "검색창에서 노드 이름으로 빠른 검색"
    - "타입 필터로 특정 종류 노드만 표시"
    - "눈 아이콘으로 노드 가시성 토글"
    - "배지를 통한 노드 타입 및 자식 수 확인"
    - "메시 노드의 지오메트리 타입 표시"

# 기술적 개선사항
technical_improvements:
  performance:
    - "Three.js 네이티브 API 활용으로 성능 향상"
    - "불필요한 JSON 직렬화/역직렬화 제거"
    - "효율적인 메모리 관리 (dispose 패턴)"
  
  reliability:
    - "순환 참조 방지 로직"
    - "타입 안전성 강화"
    - "오류 처리 개선"
    - "리소스 누수 방지"
  
  user_experience:
    - "직관적인 시각적 피드백"
    - "검색 및 필터링 편의성"
    - "실시간 동기화"
    - "툴팁을 통한 상세 정보 제공"

# 버전 히스토리
version_history:
  v1.0.0:
    - "초기 구현: JSON 기반 노드 조작"
    - "기본 트리 뷰 및 복사/붙여넣기"
  v2.0.0:
    - "Three.js 네이티브 API 도입"
    - "개선된 모델 트리 컴포넌트"
    - "완전한 계층구조 복제 및 조작"
    - "실시간 씬 동기화"
    - "고급 검색 및 배치 처리"

# 구현 상태 체크리스트
implementation_checklist:
  
  ## ✅ 구현 완료된 기능들 (v2.0.0 기준)
  implemented_features:
    core_functionality:
      - "✅ VRM/GLB 파일 드래그앤드롭 업로드"
      - "✅ Three.js 기반 3D 모델 뷰어"
      - "✅ 애니메이션 재생/일시정지/슬라이더 컨트롤"
      - "✅ 모델 자동 스케일링 및 센터링"
      - "✅ OrbitControls 카메라 조작"
      
    node_tree_display:
      - "✅ Three.js Object3D 기반 정확한 계층구조 표시"
      - "✅ 모델 구조 트리 + Scene Graph 트리 이중 표시"
      - "✅ 노드 타입별 아이콘 (📦 메시, 📁 그룹, 🦴 본, 💡 조명 등)"
      - "✅ 노드 타입별 색상 배지"
      - "✅ 자식 노드 개수 표시"
      - "✅ 계층구조 펼치기/접기"
      - "✅ 메시 지오메트리 타입 표시"
      - "✅ 시스템 객체 별도 구분 (조명, GridHelper 등)"
      
    node_operations:
      - "✅ Three.js Object3D.add()/remove() 기반 노드 이동"
      - "✅ cloneObject3DRecursive() 완전 복제"
      - "✅ 메시/머티리얼/텍스처 참조 관계 보존 복사"
      - "✅ VRM 본 스켈레톤 참조 재구성"
      - "✅ 스키닝된 메시 복제 지원"
      - "✅ 순환 참조 방지 로직"
      - "✅ 월드 좌표계 보존 옵션"
      - "✅ 모델 간 노드 복사/붙여넣기 (JSON 기반)"
      - "✅ Scene Graph 간 노드 복사/붙여넣기 (Object3D 기반)"
      - "✅ 같은 Scene Graph 내 노드 이동"
      - "✅ 안전한 노드 삭제 (시스템 객체 보호)"
      
    dual_clipboard_system:
      - "✅ JSON 기반 모델 구조 클립보드"
      - "✅ Three.js Object3D 기반 Scene Graph 클립보드"
      - "✅ 클립보드 상태 시각적 표시"
      - "✅ 클립보드 비우기 기능"
      - "✅ Cross-Scene Graph 복사/붙여넣기"
      
    search_and_filter:
      - "✅ 노드 이름 기반 검색 (부분 일치)"
      - "✅ 타입별 필터링 (메시, 그룹, 본, 조명)"
      - "✅ 검색 결과 하이라이트"
      - "✅ 숨겨진 노드 표시/숨김 토글"
      - "✅ 검색된 노드 경로 자동 확장"
      
    ui_interactions:
      - "✅ 노드 가시성 실시간 토글"
      - "✅ 복사 상태 시각적 피드백"
      - "✅ 툴팁을 통한 기능 안내"
      - "✅ 선택된 노드 하이라이트"
      - "✅ 클립보드 상태 표시"
      
    history_management:
      - "✅ 50단계 실행 취소/다시 실행"
      - "✅ 작업별 설명 메시지"
      - "✅ 히스토리 상태 UI 업데이트"
      
    export_functionality:
      - "✅ 편집된 모델 GLB 형태 내보내기"
      - "✅ 씬 상태 기반 내보내기"
      
    technical_infrastructure:
      - "✅ SceneStructureSync 실시간 동기화"
      - "✅ NodeSearcher 다중 조건 검색"
      - "✅ BatchOperationProcessor 배치 작업"
      - "✅ VRM 휴마노이드 본 정보 추적"
      - "✅ 메시-머티리얼-텍스처 관계 추적"
      - "✅ 메모리 누수 방지 (dispose 패턴)"
      - "✅ 타입 안전성 (TypeScript)"

  ## 🔄 부분 구현 / 개선 필요한 기능들
  partially_implemented:
    enhanced_ui:
      - "✅ 기존 model-tree.tsx와 enhanced-model-tree.tsx 통합"
      - "✅ Scene Graph Tree 추가 구현"
      - "✅ 이중 클립보드 시스템 구현"
      - "🔄 상태 관리 최적화 (JSON + Object3D 동기화)"
      
    error_handling:
      - "🔄 파일 로딩 오류 처리 강화"
      - "🔄 노드 조작 오류 복구 메커니즘"
      - "🔄 메모리 부족 시 대응"
      
    performance_optimization:
      - "🔄 대용량 모델 처리 최적화"
      - "🔄 노드 렌더링 가상화 (많은 노드 처리)"
      - "🔄 검색 성능 개선 (인덱싱)"

  ## ✅ 최근 해결된 문제들
  recently_fixed:
    glb_export_issues:
      - "✅ GLB 파일 크기 축소 문제 해결"
        description: "원본 대비 50% 축소되던 문제 완전 해결"
        solution: "모델 객체만 선별적 추출, 시스템 객체 정확한 필터링"
        date: "2025-05-20"
      
      - "✅ 객체 겹침 문제 해결"
        description: "내보낸 모델의 모든 객체가 원점으로 모이던 문제 해결"
        solution: "월드 변환 행렬 보존, 변환 매트릭스 분해 방지 (trs: false)"
        date: "2025-05-20"
      
      - "✅ 애니메이션 누락 문제 해결"
        description: "내보낸 GLB 파일에 애니메이션이 포함되지 않던 문제 해결"
        solution: "Three.js AnimationClip을 모델 구조에 직접 저장, 애니메이션 콜백 추가"
        technical_details:
          - "ModelViewer에서 onAnimationsLoaded 콜백으로 애니메이션 전달"
          - "부모 컴포넌트에서 modelStructure.animations에 Three.js 객체 저장"
          - "GLTFExporter에 실제 AnimationClip 배열 전달"
        date: "2025-05-20"
      
      - "✅ 텍스처 품질 보존"
        description: "내보내기 시 텍스처 품질이 저하되던 문제 해결"
        solution: "forcePowerOfTwoTextures: false, maxTextureSize 설정"
        date: "2025-05-20"

  ## 🔲 미구현 기능들 (우선순위별)
  not_implemented:
    
    ### 높은 우선순위 (필수)
    high_priority:
      - "🔲 JSON 구조와 Scene Graph 동기화"
        priority: "urgent"
        description: "모델 구조 변경 시 Scene Graph 자동 업데이트"
        estimated_effort: "4시간"
        technical_requirements:
          - "ModelViewer에서 구조 변경 감지"
          - "sceneToHierarchy() 실시간 호출"
          - "양방향 동기화 매커니즘"
        files_to_modify:
          - "components/model-viewer.tsx"
          - "app/page.tsx"
          - "lib/three-scene-utils.ts"
      
      - "🔲 히스토리 매니저 Scene Graph 지원"
        priority: "urgent"
        description: "Scene Graph 작업도 실행 취소/다시 실행 지원"
        estimated_effort: "3시간"
        files_to_modify:
          - "lib/history-manager.ts"
          - "components/scene-graph-tree.tsx"
    
    ### 중간 우선순위 (권장)
    medium_priority:
      - "🔲 드래그앤드롭 노드 재배치"
        priority: "medium"
        description: "트리에서 드래그로 노드 이동"
        estimated_effort: "8시간"
        technical_requirements:
          - "react-beautiful-dnd 또는 dnd-kit 라이브러리"
          - "Three.js 계층구조와 실시간 동기화"
          - "드롭 대상 유효성 검증"
      
      - "🔲 노드 속성 편집기"
        priority: "medium"
        description: "선택된 노드의 transform, 속성 편집"
        estimated_effort: "6시간"
        features:
          - "position, rotation, scale 실시간 편집"
          - "머티리얼 속성 수정"
          - "가시성, 이름 변경"
          - "수치 입력 + 슬라이더 UI"
      
      - "🔲 모델 비교 모드"
        priority: "medium"
        description: "두 모델의 차이점 시각적 표시"
        estimated_effort: "5시간"
        features:
          - "노드 구조 차이 하이라이트"
          - "누락/추가된 노드 표시"
          - "속성 차이 비교"
      
      - "🔲 노드 그룹 선택"
        priority: "medium"
        description: "여러 노드 동시 선택 및 배치 작업"
        estimated_effort: "7시간"
        features:
          - "Ctrl+클릭 다중 선택"
          - "Shift+클릭 범위 선택"
          - "선택된 노드들 배치 이동/복사/삭제"
      
      - "🔲 즐겨찾기 노드"
        priority: "medium"
        description: "자주 사용하는 노드 북마크"
        estimated_effort: "3시간"
        features:
          - "노드 즐겨찾기 추가/제거"
          - "즐겨찾기 목록 표시"
          - "빠른 접근 버튼"
    
    ### 낮은 우선순위 (선택사항)
    low_priority:
      - "🔲 다중 모델 동시 편집"
        priority: "low"
        description: "3개 이상 모델 동시 로드 및 편집"
        estimated_effort: "12시간"
        technical_challenges:
          - "UI 레이아웃 재설계"
          - "상태 관리 복잡도 증가"
          - "성능 최적화"
      
      - "🔲 작업 공간 저장/로드"
        priority: "low"
        description: "편집 세션 저장 및 복원"
        estimated_effort: "6시간"
        features:
          - "모델 + 편집 히스토리 저장"
          - "작업 공간 파일 (.json)"
          - "세션 자동 저장"
      
      - "🔲 커스텀 노드 필터"
        priority: "low"
        description: "사용자 정의 필터링 조건"
        estimated_effort: "4시간"
        features:
          - "속성값 기반 필터"
          - "복합 조건 설정"
          - "필터 프리셋 저장"
      
      - "🔲 노드 애니메이션 편집"
        priority: "low"
        description: "키프레임 편집 기능"
        estimated_effort: "15시간"
        scope: "매우 복잡한 기능"
      
      - "🔲 플러그인 시스템"
        priority: "low"
        description: "확장 가능한 플러그인 아키텍처"
        estimated_effort: "20시간"
        scope: "아키텍처 변경 필요"
      
      - "🔲 협업 기능"
        priority: "low"
        description: "실시간 다중 사용자 편집"
        estimated_effort: "30시간"
        technical_requirements:
          - "WebSocket/WebRTC"
          - "충돌 해결 알고리즘"
          - "권한 관리"

  ## 🐛 알려진 버그 및 개선사항
  known_issues:
    bugs:
      - "🐛 대용량 VRM 파일 로딩 시 UI 프리징"
        severity: "medium"
        reproduction: "10MB+ VRM 파일 업로드 시"
        solution: "Web Worker 활용 비동기 로딩"
      
      - "🐛 일부 GLB 파일의 머티리얼 복사 시 텍스처 누락"
        severity: "low"
        reproduction: "특정 Blender 내보내기 파일"
        solution: "텍스처 복사 로직 강화"
      
      - "🐛 브라우저 뒤로 가기 시 상태 유실"
        severity: "low"
        reproduction: "편집 중 브라우저 뒤로 가기"
        solution: "히스토리 API 활용"
      
      - "✅ 애니메이션 재생 문제 완전 해결"
        severity: "fixed"
        description: "클로저 캡처 문제 해결로 슬라이더와 재생 상태 완전 동기화"
        solution: "useRef 기반 상태 관리로 클로저 문제 해결"
        improvements:
          - "isPlayingRef, animationProgressRef 도입으로 최신 상태 참조"
          - "애니메이션 루프에서 클로저에 의한 stale state 문제 해결"
          - "React state와 Three.js 액션 상태 완전 동기화"
          - "슬라이더 이동 시 재생 상태 정확한 복원"
          - "모든 애니메이션 제어 함수 ref 기반으로 개선"
    
    performance_issues:
      - "⚡ 노드 1000개+ 모델에서 트리 렌더링 지연"
        impact: "large models"
        solution: "가상 스크롤링 구현"
      
      - "⚡ 애니메이션 재생 시 메모리 사용량 지속 증가"
        impact: "long sessions"
        solution: "애니메이션 버퍼 관리 개선"
    
    ui_ux_improvements:
      - "🎨 다크 모드 지원"
        priority: "medium"
        effort: "4시간"
      
      - "🎨 키보드 단축키 지원"
        priority: "medium"
        shortcuts:
          - "Ctrl+C/V: 복사/붙여넣기"
          - "Del: 노드 삭제"
          - "Ctrl+Z/Y: 실행 취소/다시 실행"
          - "F: 선택 노드 포커스"
        effort: "3시간"
      
      - "🎨 반응형 디자인 개선"
        priority: "low"
        description: "모바일/태블릿 지원"
        effort: "8시간"

# 다음 스프린트 권장사항
next_sprint_recommendations:
  immediate_tasks: # 1-2주 내
    1: "JSON↔Scene Graph 양방향 동기화 구현"
    2: "Scene Graph 작업 히스토리 지원"
    3: "성능 최적화 (대용량 모델)"
    4: "알려진 버그 수정"
  
  short_term_goals: # 1달 내
    1: "드래그앤드롭 노드 재배치 구현"
    2: "노드 속성 편집기 추가"
    3: "다크 모드 및 키보드 단축키"
    4: "반응형 디자인 개선"
  
  long_term_vision: # 3달 내
    1: "모델 비교 모드"
    2: "다중 노드 선택 및 배치 작업"
    3: "작업 공간 저장/로드 기능"
    4: "플러그인 시스템 기반 설계"

# 개발 우선순위 매트릭스
priority_matrix:
  urgent_important: # 즉시 해야 함
    - "JSON↔Scene Graph 동기화"
    - "Scene Graph 히스토리 지원"
    - "알려진 버그 수정"
  
  important_not_urgent: # 계획하여 진행
    - "드래그앤드롭 재배치"
    - "노드 속성 편집기"
    - "성능 최적화"
  
  urgent_not_important: # 다른 사람에게 위임 가능
    - "UI/UX 개선"
    - "반응형 디자인"
  
  not_urgent_not_important: # 나중에 또는 안 함
    - "커스텀 필터"
    - "협업 기능"
    - "플러그인 시스템"

# Scene Graph 기능 가이드
scene_graph_usage:
  basic_operations:
    - "🌐 Scene 루트에서 시작하는 완전한 Object3D 트리"
    - "📦 메시, 조명, 카메라 등 모든 Three.js 객체 표시"
    - "👁️ 실시간 가시성 토글"
    - "🔍 타입별 필터링 및 검색"
    - "📊 Scene 통계 정보"
  
  cross_scene_operations:
    - "📋 Scene Graph 간 Object3D 직접 복사"
    - "🔄 같은 Scene 내 노드 이동 (부모 변경)"
    - "⚠️ 시스템 객체 (조명, Helper) 자동 보호"
    - "🔗 순환 참조 방지"
  
  differences_from_model_tree:
    - "모델 구조 트리: JSON 기반, 파일 구조 중심"
    - "Scene Graph 트리: Object3D 기반, 런타임 씬 중심"
    - "모델 구조: 정적 데이터 조작"
    - "Scene Graph: 동적 씬 조작"

# %%%%%LAST%%%%%
